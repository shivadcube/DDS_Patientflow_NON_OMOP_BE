#!/usr/bin/env python
"""
Django settings for DDS3-PatientFlow project.
Generated by 'django-admin startproject' using Django 1.10.5.
For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import datetime
import djcelery
import os
import pytz
import sys

from os.path import abspath, dirname, basename, join

from datetime import date
from distutils.sysconfig import get_python_lib

from django.utils import timezone
import environ
env = environ.Env()
environ.Env.read_env()

djcelery.setup_loader()
sys.path.append(os.getcwd())

ROOT_PATH = abspath(join(dirname(__file__), '..'))
PROJECT_NAME = basename(abspath(dirname(__file__)))

ENV_LOCAL = 'local'
ENV_STAGING = 'staging'
ENV_PROD = 'prod'

ENVIRON = ENV_LOCAL

API_THROTTLE_RATE = 500

# No slash is needed at the end of API call.
TASTYPIE_ALLOW_MISSING_SLASH = True
APPEND_SLASH = False

USE_TZ = True

DATABASES = {
    'default': {
        # Sqlite3 so that tests to run blazingly fast!
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/dev/shm/sqlite3.db',
        'TEST_CHARSET': 'UTF8',
        'TEST_NAME': None  # in-memory sqlite db
    },
    'readonly': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/dev/shm/sqlite3.db',
        'TEST_CHARSET': 'UTF8',
        'TEST_NAME': None  # in-memory sqlite db
    },
    'staging': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/dev/shm/sqlite3_staging.db',
        'TEST_CHARSET': 'UTF8',
        'TEST_NAME': None  # in-memory sqlite db
    },
    'prod': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/dev/shm/sqlite3_prod.db',
        'TEST_CHARSET': 'UTF8',
        'TEST_NAME': None  # in-memory sqlite db
    }
}

# ----------------/ CELERY /-----------------/
CELERY_EMAIL_TASK_CONFIG = {}

BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
# ----------------/ END /-----------------/


# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
# TIME_ZONE = 'Asia/Calcutta'

TIME_ZONE = "America/New_York"

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = os.path.join(ROOT_PATH, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(ROOT_PATH, 'static/')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# URL prefix for admin static files -- CSS, JavaScript and images.
# Make sure to use a trailing slash.
# Examples: "http://foo.com/static/admin/", "/static/admin/".
ADMIN_MEDIA_PREFIX = '/static/admin/'

# Additional locations of static files
STATICFILES_DIRS = (
)

# List of finder classes +that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'djangobower.finders.BowerFinder',
)

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.CachedStaticFilesStorage'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# List of callables that know how to import templates from various sources.

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [join(ROOT_PATH, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'DDS3-PatientFlow.utils.settings_environment',
            ],
        },
    },
]

MIDDLEWARE_CLASSES = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'DDS3-PatientFlow.middleware.CsrfCookieMiddleware',
    'DDS3-PatientFlow.middleware.TimezoneMiddleware',
    'DDS3-PatientFlow.middleware.RemoteUserMiddleware',
    'DDS3-PatientFlow.middleware.TransformRequestBody',
    'DDS3-PatientFlow.auth_custom_middleware.AuthenticationMiddleware',

]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # Needed to login by username in Django admin, regardless of 'allauth'
    # 'allauth.account.auth_backends.AuthenticationBackend',      # 'allauth' specific authentication methods, such as login by e-mail
    # 'DDS3-PatientFlow.auth_backends.ApiKeyAuthBackend',                   # Needed to login by username and apikey
]

ROOT_URLCONF = 'DDS3-PatientFlow.urls'

OVERRIDE_APPS = [
    'test_without_migrations',
]

DJANGO_APPPS = [
    'django.contrib.admin.apps.SimpleAdminConfig',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.messages',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'corsheaders',
    'djangobower',
    'django_nose',
    'djcelery',
    'djsupervisor',
    'kombu',
    'tastypie',
]

CUSTOM_APPS = [
    'accounts',
    'attributes',
    'cohort',
    'drugs',
    #'livy',
    'projects',
    'web',
    'comparison_tab',
]

INSTALLED_APPS = OVERRIDE_APPS + DJANGO_APPPS + THIRD_PARTY_APPS + CUSTOM_APPS

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'suppress_unreadable_post': {
            '()': 'DDS3-PatientFlow.logging_utils.SuppressUnreadablePost',
        },
        'suppress_suspicious_operation': {
            '()': 'DDS3-PatientFlow.logging_utils.SuppressSuspiciousOperation',
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': 'requests.log',
            'maxBytes': 1024 * 32,
            'backupCount': 5
        },
        'log_prints': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/DDS3-PatientFlow/requests.log',
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 5
        },
        'task_callbacks_prints': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/DDS3-PatientFlow/tasks.log',
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 5
        },
        'log_error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/DDS3-PatientFlow/dds3_admin.error.log',
            'maxBytes': 1024 * 32,
            'backupCount': 5
        },
        'log_generic_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/DDS3-PatientFlow/dds3.generic.log',
            'maxBytes': 1024 * 32,
            'backupCount': 5
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': [
                'require_debug_false',
                'suppress_unreadable_post',
                'suppress_suspicious_operation'
            ],
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'request.logger': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'task_state.logger': {
            'handlers': ['task_callbacks_prints'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.core.mail': {
            'handlers': ['log_error_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'error.logger': {
            'handlers': ['log_error_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'generic.logger': {
            'handlers': ['log_generic_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
# ------------ CORS WHILIST DOMAINS -----------------#
CORS_ORIGIN_WHITELIST = [
    'localhost',
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS',
    'PATCH',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-control-allow-origin',
    'cache-control',

]

# --------------- / end / -----------------#

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

RAMDISK_SIZE = 200  # default to 128 MB. override with -s option
RAMDISK_PATH = '/dev/disk1'  # overide with -p option

# --------------- CACHING -----------------
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'
    }
}
# --------------- / end / -----------------

CACHE_VERSION = 1

RUNNING_TESTS = False

EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

ROOT_URL = 'localhost:8000/'
ROOT_URL_WITH_SCHEME = 'http://' + ROOT_URL

CONN_MAX_AGE = 3600
TEST_WITHOUT_MIGRATIONS_COMMAND = 'django_nose.management.commands.test.Command'

# if X-Forwarded-Proto(set by ELB) is https then treat this connection as secure
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

TASTYPIE_DEFAULT_FORMATS = ['json']

CORS_ORIGIN_ALLOW_ALL = True
